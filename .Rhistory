demo
install.package("slidify")
install.packages("slidify")
a <- available.packages()
a
install.packages("slidify")
source("http://bioconductor.org/biolclite.R")
source("http://bioconductor.org/biocLite.R")
biocLite()
find.package("devtools")
install.packages("devtools")
View(a)
library(devtools)
find_rtools()
install.packages("KernSmooth")
library(KernSmooth)
load("~/.RData")
toc: yes
* `pwd` = print working directory (current directory)
---
}
add2 <- function(x,y){
x+y
}
aad2(2,2)
add2(2,2)
abovex <- functin(x,n) {
use <- x > n
x[use]
}
abovex <- functin(x,n) {
use <- x > n
x[use]
}
abovex <- functin(x,n) {
use <- x > n
x[use]
}
abovex <- functin(x,n) {
use <- x > n
x[use]
}
add2 <- function(x,y){
x+y
}
abovex <- function(x,n) {
use <- x > n
x[use]
}
means ?
?means
?mean
??mean
args(mean)
args(lm)
args(means)
args(lm)
search(
search()
library(datasets)
data(iris)
?iris
iris
f <- factor(c("setosa", "versicolor","virginica"))
f
lapply(split(iris,f),mean)
x <- split(iris,f)
x
lapply(x,mean)
s <- split(iris,irs$Specie)
s <- split(iris,iris$Specie)
lapply(s,colMeans)
View(iris)
lapply(s,function x colMeans(x,c("Sepal.Length")))
lapply(s,function(x) colMeans(x,c("Sepal.Length")))
lapply(s,function x colMeans(x,c("Sepal.Length")))
lapply(s,function(x) colMeans(x[,c("Sepal.Length")]))
lapply(s,function(x) colMeans(x[,c("Sepal.Length")]))
s
lapply(s,colMeans)
s$Petal.Length
s
s$Petal.Length
iris$Petal.Length
lapply(s,colMeans)
s
s[1]
s[1]
lapply(s, function(x) colMeans(x[,"Petal.Length"]))
lapply(s, function(x) mean(x$Petal.Length))
lapply(s, function(x) colMeans(x[,c("Petal.Length","Sepal.Width")]))
lapply(s, function(x) colMeans(x[,c("Petal.Length","Sepal.Width","Sepal.Length")]))
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
?mtcars
mtcars
View(mtcars)
View(mtcars)
apply(mtcars, 2, mean)
lapply(s, function(x) colMeans(x[,1:4))
lapply(s, function(x) colMeans(x[,1:4]))
lapply(split(mtcars, mtcars$cyl), function(x) colMeans(x[,1:4]))
sapply(mtcars, cyl, mean)
split(mtcars, mtcars$cyl)
with(mtcars, tapply(mpg, cyl, mean))
lapply(split(mtcars, mtcars$cyl), function(x) colMeans(x[,2]))
lapply(split(mtcars, mtcars$cyl), function(x) mean(x[,2]))
lapply(split(mtcars, mtcars$cyl), function(x) mean(x[,1]))
x <- lapply(split(mtcars, mtcars$cyl), function(x) mean(x[,1]))
x
x$4 - x$5
x$"4" - x$"5"
x[1]
x[1]-x[8]
x[8]
x[3]
x[1]-x[3]
x[[1]-x[[3]
x[[1]-x[[3]]
x[[1]]-x[[3]]
debug(ls)
ls
x <- lapply(split(mtcars, mtcars$hp), function(x) mean(x[,1]))
install.packages("RMySQL")
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(rhdf5)
library(swirl)
install_from_swirl("Getting and Cleaning Data")
iinstall.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
d <- mpg
View(d)
qplot(hwy, data = mpg)
qplot(hwy, data = mpg, fill = drv)
install.packages("lattice")
qplot(hwy, data = mpg, facets drv.~)
qplot(hwy, data = mpg, facets drv~.)
qplot(hwy, data = mpg, facets = drv~.)
qplot(hwy, data = mpg, facets = .~drv)
qplot(hwy, data = mpg, facets = .drv)
qplot(hwy, data = mpg, facets = cyl.~drv)
qplot(hwy, data = mpg, facets = cyl~.~drv)
qplot(hwy, data = mpg, facets = cyl~drv)
qplot(hwy, cyl, data = mpg)
qplot(hwy, displ, data = mpg)
qplot(hwy, displ, data = mpg, shape = drv)
qplot(hwy, displ, data = mpg, shape = drv, color = drv)
qplot(hwy, displ, data = mpg, shape = drv, color = drv, geom = c("point", "smooth"))
qplot(hwy, displ, data = mpg, shape = drv, color = drv, geom = c("point", "smooth"), method = "lm")
qplot(hwy, displ, data = mpg, shape = drv, color = drv, facets = drv, geom = c("point", "smooth"), method = "lm")
qplot(hwy, displ, data = mpg, shape = drv, color = drv, facets = .~drv, geom = c("point", "smooth"), method = "lm")
qplot(hwy, displ, data = mpg, shape = drv, color = drv, facets = cyl.~drv, geom = c("point", "smooth"), method = "lm")
qplot(hwy, displ, data = mpg, shape = drv, color = drv, facets = cyl~drv, geom = c("point", "smooth"), method = "lm")
xyplot(weight ~ Time | Diet, BodyWeight)
library(lattice)
library(nlme)
xyplot(weight ~ Time | Diet, BodyWeight)
view(Diet)
viewdata(Diet)
d <- Diet
d <- BodyWeight
View(d)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
print(p)
trellis.par.set()
library(datasets)
data(airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
View(airquality)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(votes, rating, data = movies)
vie(movies)
View(movies)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies, smooth = "loess")
library(swirl)
install_from_swirl("Exploratory Data Analysis")
library(swirl)
install_from_swirl("Exploratory Data Analysis")
source('~/GIT Repositories/ExData_Plotting1/plot2.R')
source('~/GIT Repositories/ExData_Plotting1/plot4.R')
library(dplyr)
data <- read.csv("activity.csv")
data$date <- as.Date(data$date, "%Y-%m-%d")
dataPerDay <- group_by(data, date)
dataPerDay <- summarise_each(dataPerDay , funs(sum))
dataPerInterval <- group_by(data, interval)
dataPerInterval <- summarise_each(dataPerInterval , funs(mean(., na.rm = TRUE)))
setwd("~/GIT Repositories/RepData_PeerAssessment1")
library(dplyr)
data <- read.csv("activity.csv")
data$date <- as.Date(data$date, "%Y-%m-%d")
dataPerDay <- group_by(data, date)
dataPerDay <- summarise_each(dataPerDay , funs(sum))
dataPerInterval <- group_by(data, interval)
dataPerInterval <- summarise_each(dataPerInterval , funs(mean(., na.rm = TRUE)))
nadata -> filter(data, steps == NA)
nadata <- filter(data, steps == NA)
nadata <- data[is.na(data),]
View(nadata)
length(nadata)
size(nadata)
count(nadata)
library(data.table)
for (i in 1:nrow(data)){}
source('~/GIT Repositories/RepData_PeerAssessment1/rcode for report.R')
source('~/GIT Repositories/RepData_PeerAssessment1/rcode for report.R')
source('~/GIT Repositories/RepData_PeerAssessment1/rcode for report.R')
PA1
PA1()
View(data)
setkey(data, steps)
setkey(data, data$steps)
setkey(data, "steps")
dataT <- data.table(data)
setkey(dataT, "steps")
dataT <- data.table(data)
dataT <- data.table(dataPerDay)
setkey(dataT, "date")
View(dataT)
dataT(2012-10-01)
tables()
key(2012-10-01)
key(2012-10-02)
dataT2 <- data.table(dataPerInterval)
setkey(dataT2, "interval")
tables
tables()
key(5)
dataT2.key(5)
View(dataPerInterval)
newdata <- data
for (i in nrow(newdata)){
if (is.na(newdata[i,1])){
for (j in nrow(dataPerInterval)){
if (dataPerInterval[j, 1] == newdata[i, 3]){
newdata[i,3] = dataPerInterval[j, 2]
}
}
}
}
View(newdata)
jbdata <- PA1
jbdata <- PA1()
View(jbdata)
for (i in nrow(newdata)){
if (is.na(newdata[i,1])){
print("Now I have found an NA value")
for (j in nrow(dataPerInterval)){
if (dataPerInterval[j, 1] == newdata[i, 3]){
newdata[i,3] = dataPerInterval[j, 2]
print("now we have replaced some data")
}
}
}
}
for (i in nrow(newdata)){
if (is.na(newdata[i,1])){
print("Now I have found an NA value")
for (j in nrow(dataPerInterval)){
print("test")
if (dataPerInterval[j, 1] == newdata[i, 3]){
newdata[i,1] = dataPerInterval[j, 2]
print("now we have replaced some data")
}
}
}
}
nrow(newdata)
for (i in nrow(newdata)){
if (is.na(newdata[i,1])){
print("Now I have found an NA value" + i)
for (j in nrow(dataPerInterval)){
print("test" + j)
if (dataPerInterval[j, 1] == newdata[i, 3]){
newdata[i,1] = dataPerInterval[j, 2]
print("now we have replaced some data")
}
}
}
}
newdata <- data
for (i in nrow(newdata)){
if (is.na(newdata[i,1])){
print("Now I have found an NA value" & i)
for (j in nrow(dataPerInterval)){
print("test" & j)
if (dataPerInterval[j, 1] == newdata[i, 3]){
newdata[i,1] = dataPerInterval[j, 2]
print("now we have replaced some data")
}
}
}
}
newdata <- data
for (i in nrow(newdata)){
if (is.na(newdata[i,1])){
print(paste("Now I have found an NA value" , i))
for (j in nrow(dataPerInterval)){
print(paste("test", j))
if (dataPerInterval[j, 1] == newdata[i, 3]){
newdata[i,1] = dataPerInterval[j, 2]
print("now we have replaced some data")
}
}
}
}
newdata <- data
for (i in 1:nrow(newdata)){
if (is.na(newdata[i,1])){
print(paste("Now I have found an NA value" , i))
for (j in 1:nrow(dataPerInterval)){
print(paste("test", j))
if (dataPerInterval[j, 1] == newdata[i, 3]){
newdata[i,1] = dataPerInterval[j, 2]
print("now we have replaced some data")
}
}
}
}
jbdata <- PA1()
jbdata <- PA1()
newdata <- data
for (i in 1:nrow(newdata)){
if (is.na(newdata[i,1])){
#print(paste("Now I have found an NA value" , i))
for (j in 1:nrow(dataPerInterval)){
print(paste("test", j))
if (dataPerInterval[j, 1] == newdata[i, 3]){
newdata[i,1] = dataPerInterval[j, 2]
#print("now we have replaced some data")
}
}
}
}
newdata <- data
for (i in 1:nrow(newdata)){
if (is.na(newdata[i,1])){
#print(paste("Now I have found an NA value" , i))
for (j in 1:nrow(dataPerInterval)){
#print(paste("test", j))
if (dataPerInterval[j, 1] == newdata[i, 3]){
newdata[i,1] = dataPerInterval[j, 2]
#print("now we have replaced some data")
}
}
}
}
newdata
View(newdata)
hist(newdata)
statNewData <- summary(newdata)
View(newdata)
newdata$steps <- as.numeric(newdata$steps)
hist(newdata)
statNewData <- summary(newdata)
hist(newdata$steps)
statNewData <- summary(newdata$steps)
statNewData
newData <- data
for (i in 1:nrow(newData)){
if (is.na(newdata[i,1])){
for (j in 1:nrow(dataPerInterval)){
if (dataPerInterval[j, 1] == newData[i, 3]){
newData[i,1] = dataPerInterval[j, 2]
}
}
}
}
newDataPerDay <- group_by(newData, date)
newDataPerDay <- summarise_each(newDataPerDay , funs(sum))
hist(newDataPerDay$steps)
statNewData <- summary(newDataPerDay$steps)
nadata <- data[is.na(data),]
newData <- data
for (i in 1:nrow(newData)){
if (is.na(newData[i,1])){
for (j in 1:nrow(dataPerInterval)){
if (dataPerInterval[j, 1] == newData[i, 3]){
newData[i,1] = dataPerInterval[j, 2]
}
}
}
}
newDataPerDay <- group_by(newData, date)
newDataPerDay <- summarise_each(newDataPerDay , funs(sum))
hist(newDataPerDay$steps)
statNewData <- summary(newDataPerDay$steps)
library(chon)
y
install.packages(chon)
install.packages("chon")
install.packages(chron)
install.packages("chron")
install.packages("chron")
library(chron)
mutate(newData, weekday =
ifelse(is.weekend(date), "weekend", "weekday")
)
View(newData)
newData <- mutate(newData, weekday =
ifelse(is.weekend(date), "weekend", "weekday")
)
class(newData$weekday)
newData$weekday <- as.factor(newData$weekday)
class(newData$weekday)
library(ggplot2)
newDataPerDay <- mutate(newDataPerDay, weekday =
ifelse(is.weekend(date), "weekend", "weekday")
)
newDataPerDay$weekday <- as.factor(newDataPerDay$weekday)
qplot(intervals, weekday, data = newDataPerDay)
View(newDataPerDay)
qplot(interval, weekday, data = newDataPerDay)
newDataPerDay <- group_by(newData, date)
newDataPerDay <- summarise_each(newDataPerDay , funs(sum))
hist(newDataPerDay$steps)
statNewData <- summary(newDataPerDay$steps)
View(newDataPerDay)
View(newData)
newDataPerDay <- group_by(newData, date)
View(newDataPerDay)
newDataPerDay <- summarise_each(newDataPerDay , funs(sum))
View(newDataPerDay)
View(newData)
newData <- data
for (i in 1:nrow(newData)){
if (is.na(newData[i,1])){
for (j in 1:nrow(dataPerInterval)){
if (dataPerInterval[j, 1] == newData[i, 3]){
newData[i,1] = dataPerInterval[j, 2]
}
}
}
}
newDataPerDay <- group_by(newData, date)
newDataPerDay <- summarise_each(newDataPerDay , funs(sum))
hist(newDataPerDay$steps)
statNewData <- summary(newDataPerDay$steps)
library(chron)
newDataPerDay <- mutate(newDataPerDay, weekday =
ifelse(is.weekend(date), "weekend", "weekday")
)
library(ggplot2)
qplot(interval, steps data = newDataPerDay, facets = .~weekday)
qplot(interval, steps, data = newDataPerDay, facets = .~weekday)
qplot(interval, steps, data = newDataPerDay, facets = weekday~.)
qplot(interval, steps, data = newDataPerDay, facets = weekday~.)
library(chron)
newData <- mutate(newData, weekday =
ifelse(is.weekend(date), "weekend", "weekday")
)
library(ggplot2)
qplot(interval, steps data = newData, facets = weekday.~)
library(chron)
newData <- mutate(newData, weekday =
ifelse(is.weekend(date), "weekend", "weekday")
)
library(ggplot2)
qplot(interval, steps, data = newData, facets = weekday.~)
library(chron)
newData <- mutate(newData, weekday =
ifelse(is.weekend(date), "weekend", "weekday")
)
library(ggplot2)
qplot(interval, steps, data = newData, facets = weekday.~)
qplot(interval, steps, data = newData, facets = weekday.~)
qplot(interval, steps, data = newData, facets = weekday.~ )
qplot(interval, steps, data = newData, facets = weekday~. )
qplot(interval, steps, data = newData, facets = weekday~. , geom = c("point", "smooth"))
)
library(lattice)
xyplot(interval~steps, data = newData | weekday)
xyplot(interval~steps, data = newData | "weekday")
xyplot(interval~steps | weekday, newData)
xyplot(steps~interval | weekday, newData)
xyplot(steps~interval | weekday*, newData)
xyplot(steps~interval | .*weekday, newData)
xyplot(steps~interval | *.weekday, newData)
xyplot(steps~interval | ~.weekday, newData)
xyplot(steps~interval | .~weekday, newData)
xyplot(steps~interval, weekday | newData)
xyplot(steps~interval | weekday, data = newData, type = "l")
xyplot(steps~interval | weekday*date , data = newData, type = "l")
xyplot(steps~interval | weekday*. , data = newData, type = "l")
xyplot(steps~interval | weekday* , data = newData, type = "l")
xyplot(steps~interval | weekday*~ , data = newData, type = "l")
xyplot(steps~interval | weekday , data = newData, type = "l")
View(newDataPerDay)
newData <- data
for (i in 1:nrow(newData)){
if (is.na(newData[i,1])){
for (j in 1:nrow(dataPerInterval)){
if (dataPerInterval[j, 1] == newData[i, 3]){
newData[i,1] = dataPerInterval[j, 2]
}
}
}
}
newData <- mutate(newData, weekday =
ifelse(is.weekend(date), "weekend", "weekday"))
newDataPerInterval <- group_by(newData, weekday, interval)
newDataPerInterval <- summarise_each(newDataPerInterval , funs(mean(., na.rm = TRUE)))
View(newDataPerInterval)
xyplot(steps~interval | weekday , data = newDataPerInterval, type = "l")
